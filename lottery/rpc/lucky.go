// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rpc

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - ID
//  - Title
//  - Img
//  - Displayorder
//  - Gtype
//  - Gdata
type DataGiftPrize struct {
  ID int64 `thrift:"Id,1" db:"Id" json:"Id"`
  Title string `thrift:"Title,2" db:"Title" json:"Title"`
  Img string `thrift:"Img,3" db:"Img" json:"Img"`
  Displayorder int64 `thrift:"Displayorder,4" db:"Displayorder" json:"Displayorder"`
  Gtype int64 `thrift:"Gtype,5" db:"Gtype" json:"Gtype"`
  Gdata string `thrift:"Gdata,6" db:"Gdata" json:"Gdata"`
}

func NewDataGiftPrize() *DataGiftPrize {
  return &DataGiftPrize{}
}


func (p *DataGiftPrize) GetID() int64 {
  return p.ID
}

func (p *DataGiftPrize) GetTitle() string {
  return p.Title
}

func (p *DataGiftPrize) GetImg() string {
  return p.Img
}

func (p *DataGiftPrize) GetDisplayorder() int64 {
  return p.Displayorder
}

func (p *DataGiftPrize) GetGtype() int64 {
  return p.Gtype
}

func (p *DataGiftPrize) GetGdata() string {
  return p.Gdata
}
func (p *DataGiftPrize) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DataGiftPrize)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *DataGiftPrize)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *DataGiftPrize)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Img = v
}
  return nil
}

func (p *DataGiftPrize)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Displayorder = v
}
  return nil
}

func (p *DataGiftPrize)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Gtype = v
}
  return nil
}

func (p *DataGiftPrize)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Gdata = v
}
  return nil
}

func (p *DataGiftPrize) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DataGiftPrize"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DataGiftPrize) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Id: ", p), err) }
  return err
}

func (p *DataGiftPrize) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Title", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Title (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Title: ", p), err) }
  return err
}

func (p *DataGiftPrize) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Img", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Img: ", p), err) }
  if err := oprot.WriteString(string(p.Img)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Img (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Img: ", p), err) }
  return err
}

func (p *DataGiftPrize) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Displayorder", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Displayorder: ", p), err) }
  if err := oprot.WriteI64(int64(p.Displayorder)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Displayorder (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Displayorder: ", p), err) }
  return err
}

func (p *DataGiftPrize) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Gtype", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Gtype: ", p), err) }
  if err := oprot.WriteI64(int64(p.Gtype)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Gtype (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Gtype: ", p), err) }
  return err
}

func (p *DataGiftPrize) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Gdata", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Gdata: ", p), err) }
  if err := oprot.WriteString(string(p.Gdata)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Gdata (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Gdata: ", p), err) }
  return err
}

func (p *DataGiftPrize) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DataGiftPrize(%+v)", *p)
}

// Attributes:
//  - Code
//  - Msg
//  - Gift
type DataResult_ struct {
  Code int64 `thrift:"Code,1" db:"Code" json:"Code"`
  Msg string `thrift:"Msg,2" db:"Msg" json:"Msg"`
  Gift *DataGiftPrize `thrift:"Gift,3" db:"Gift" json:"Gift"`
}

func NewDataResult_() *DataResult_ {
  return &DataResult_{}
}


func (p *DataResult_) GetCode() int64 {
  return p.Code
}

func (p *DataResult_) GetMsg() string {
  return p.Msg
}
var DataResult__Gift_DEFAULT *DataGiftPrize
func (p *DataResult_) GetGift() *DataGiftPrize {
  if !p.IsSetGift() {
    return DataResult__Gift_DEFAULT
  }
return p.Gift
}
func (p *DataResult_) IsSetGift() bool {
  return p.Gift != nil
}

func (p *DataResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DataResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *DataResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *DataResult_)  ReadField3(iprot thrift.TProtocol) error {
  p.Gift = &DataGiftPrize{}
  if err := p.Gift.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Gift), err)
  }
  return nil
}

func (p *DataResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DataResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DataResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Code", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Code: ", p), err) }
  if err := oprot.WriteI64(int64(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Code: ", p), err) }
  return err
}

func (p *DataResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Msg: ", p), err) }
  if err := oprot.WriteString(string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Msg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Msg: ", p), err) }
  return err
}

func (p *DataResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Gift", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Gift: ", p), err) }
  if err := p.Gift.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Gift), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Gift: ", p), err) }
  return err
}

func (p *DataResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DataResult_(%+v)", *p)
}

type LuckyService interface {
  // Parameters:
  //  - UID
  //  - Username
  //  - IP
  //  - Now
  //  - App
  //  - Sign
  DoLucky(ctx context.Context, uid int64, username string, ip string, now int64, app string, sign string) (r *DataResult_, err error)
  // Parameters:
  //  - UID
  //  - Username
  //  - IP
  //  - Now
  //  - App
  //  - Sign
  MyPrizeList(ctx context.Context, uid int64, username string, ip string, now int64, app string, sign string) (r []*DataGiftPrize, err error)
}

type LuckyServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewLuckyService instead
func NewLuckyServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LuckyServiceClient {
  return &LuckyServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewLuckyService instead
func NewLuckyServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LuckyServiceClient {
  return &LuckyServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewLuckyServiceClient(c thrift.TClient) *LuckyServiceClient {
  return &LuckyServiceClient{
    c: c,
  }
}

// Parameters:
//  - UID
//  - Username
//  - IP
//  - Now
//  - App
//  - Sign
func (p *LuckyServiceClient) DoLucky(ctx context.Context, uid int64, username string, ip string, now int64, app string, sign string) (r *DataResult_, err error) {
  var _args0 LuckyServiceDoLuckyArgs
  _args0.UID = uid
  _args0.Username = username
  _args0.IP = ip
  _args0.Now = now
  _args0.App = app
  _args0.Sign = sign
  var _result1 LuckyServiceDoLuckyResult
  if err = p.c.Call(ctx, "DoLucky", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Username
//  - IP
//  - Now
//  - App
//  - Sign
func (p *LuckyServiceClient) MyPrizeList(ctx context.Context, uid int64, username string, ip string, now int64, app string, sign string) (r []*DataGiftPrize, err error) {
  var _args2 LuckyServiceMyPrizeListArgs
  _args2.UID = uid
  _args2.Username = username
  _args2.IP = ip
  _args2.Now = now
  _args2.App = app
  _args2.Sign = sign
  var _result3 LuckyServiceMyPrizeListResult
  if err = p.c.Call(ctx, "MyPrizeList", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

type LuckyServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler LuckyService
}

func (p *LuckyServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *LuckyServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *LuckyServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewLuckyServiceProcessor(handler LuckyService) *LuckyServiceProcessor {

  self4 := &LuckyServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["DoLucky"] = &luckyServiceProcessorDoLucky{handler:handler}
  self4.processorMap["MyPrizeList"] = &luckyServiceProcessorMyPrizeList{handler:handler}
return self4
}

func (p *LuckyServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x5

}

type luckyServiceProcessorDoLucky struct {
  handler LuckyService
}

func (p *luckyServiceProcessorDoLucky) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := LuckyServiceDoLuckyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("DoLucky", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := LuckyServiceDoLuckyResult{}
var retval *DataResult_
  var err2 error
  if retval, err2 = p.handler.DoLucky(ctx, args.UID, args.Username, args.IP, args.Now, args.App, args.Sign); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoLucky: " + err2.Error())
    oprot.WriteMessageBegin("DoLucky", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("DoLucky", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type luckyServiceProcessorMyPrizeList struct {
  handler LuckyService
}

func (p *luckyServiceProcessorMyPrizeList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := LuckyServiceMyPrizeListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("MyPrizeList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := LuckyServiceMyPrizeListResult{}
var retval []*DataGiftPrize
  var err2 error
  if retval, err2 = p.handler.MyPrizeList(ctx, args.UID, args.Username, args.IP, args.Now, args.App, args.Sign); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MyPrizeList: " + err2.Error())
    oprot.WriteMessageBegin("MyPrizeList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("MyPrizeList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - UID
//  - Username
//  - IP
//  - Now
//  - App
//  - Sign
type LuckyServiceDoLuckyArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Username string `thrift:"username,2" db:"username" json:"username"`
  IP string `thrift:"ip,3" db:"ip" json:"ip"`
  Now int64 `thrift:"now,4" db:"now" json:"now"`
  App string `thrift:"app,5" db:"app" json:"app"`
  Sign string `thrift:"sign,6" db:"sign" json:"sign"`
}

func NewLuckyServiceDoLuckyArgs() *LuckyServiceDoLuckyArgs {
  return &LuckyServiceDoLuckyArgs{}
}


func (p *LuckyServiceDoLuckyArgs) GetUID() int64 {
  return p.UID
}

func (p *LuckyServiceDoLuckyArgs) GetUsername() string {
  return p.Username
}

func (p *LuckyServiceDoLuckyArgs) GetIP() string {
  return p.IP
}

func (p *LuckyServiceDoLuckyArgs) GetNow() int64 {
  return p.Now
}

func (p *LuckyServiceDoLuckyArgs) GetApp() string {
  return p.App
}

func (p *LuckyServiceDoLuckyArgs) GetSign() string {
  return p.Sign
}
func (p *LuckyServiceDoLuckyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LuckyServiceDoLuckyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *LuckyServiceDoLuckyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *LuckyServiceDoLuckyArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IP = v
}
  return nil
}

func (p *LuckyServiceDoLuckyArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Now = v
}
  return nil
}

func (p *LuckyServiceDoLuckyArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.App = v
}
  return nil
}

func (p *LuckyServiceDoLuckyArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Sign = v
}
  return nil
}

func (p *LuckyServiceDoLuckyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DoLucky_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LuckyServiceDoLuckyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *LuckyServiceDoLuckyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *LuckyServiceDoLuckyArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ip", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ip: ", p), err) }
  if err := oprot.WriteString(string(p.IP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ip (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ip: ", p), err) }
  return err
}

func (p *LuckyServiceDoLuckyArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("now", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:now: ", p), err) }
  if err := oprot.WriteI64(int64(p.Now)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.now (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:now: ", p), err) }
  return err
}

func (p *LuckyServiceDoLuckyArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("app", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:app: ", p), err) }
  if err := oprot.WriteString(string(p.App)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:app: ", p), err) }
  return err
}

func (p *LuckyServiceDoLuckyArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sign", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sign: ", p), err) }
  if err := oprot.WriteString(string(p.Sign)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sign (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sign: ", p), err) }
  return err
}

func (p *LuckyServiceDoLuckyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LuckyServiceDoLuckyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type LuckyServiceDoLuckyResult struct {
  Success *DataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewLuckyServiceDoLuckyResult() *LuckyServiceDoLuckyResult {
  return &LuckyServiceDoLuckyResult{}
}

var LuckyServiceDoLuckyResult_Success_DEFAULT *DataResult_
func (p *LuckyServiceDoLuckyResult) GetSuccess() *DataResult_ {
  if !p.IsSetSuccess() {
    return LuckyServiceDoLuckyResult_Success_DEFAULT
  }
return p.Success
}
func (p *LuckyServiceDoLuckyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *LuckyServiceDoLuckyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LuckyServiceDoLuckyResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &DataResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *LuckyServiceDoLuckyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DoLucky_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LuckyServiceDoLuckyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *LuckyServiceDoLuckyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LuckyServiceDoLuckyResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Username
//  - IP
//  - Now
//  - App
//  - Sign
type LuckyServiceMyPrizeListArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Username string `thrift:"username,2" db:"username" json:"username"`
  IP string `thrift:"ip,3" db:"ip" json:"ip"`
  Now int64 `thrift:"now,4" db:"now" json:"now"`
  App string `thrift:"app,5" db:"app" json:"app"`
  Sign string `thrift:"sign,6" db:"sign" json:"sign"`
}

func NewLuckyServiceMyPrizeListArgs() *LuckyServiceMyPrizeListArgs {
  return &LuckyServiceMyPrizeListArgs{}
}


func (p *LuckyServiceMyPrizeListArgs) GetUID() int64 {
  return p.UID
}

func (p *LuckyServiceMyPrizeListArgs) GetUsername() string {
  return p.Username
}

func (p *LuckyServiceMyPrizeListArgs) GetIP() string {
  return p.IP
}

func (p *LuckyServiceMyPrizeListArgs) GetNow() int64 {
  return p.Now
}

func (p *LuckyServiceMyPrizeListArgs) GetApp() string {
  return p.App
}

func (p *LuckyServiceMyPrizeListArgs) GetSign() string {
  return p.Sign
}
func (p *LuckyServiceMyPrizeListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LuckyServiceMyPrizeListArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *LuckyServiceMyPrizeListArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *LuckyServiceMyPrizeListArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IP = v
}
  return nil
}

func (p *LuckyServiceMyPrizeListArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Now = v
}
  return nil
}

func (p *LuckyServiceMyPrizeListArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.App = v
}
  return nil
}

func (p *LuckyServiceMyPrizeListArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Sign = v
}
  return nil
}

func (p *LuckyServiceMyPrizeListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MyPrizeList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LuckyServiceMyPrizeListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *LuckyServiceMyPrizeListArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *LuckyServiceMyPrizeListArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ip", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ip: ", p), err) }
  if err := oprot.WriteString(string(p.IP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ip (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ip: ", p), err) }
  return err
}

func (p *LuckyServiceMyPrizeListArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("now", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:now: ", p), err) }
  if err := oprot.WriteI64(int64(p.Now)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.now (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:now: ", p), err) }
  return err
}

func (p *LuckyServiceMyPrizeListArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("app", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:app: ", p), err) }
  if err := oprot.WriteString(string(p.App)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:app: ", p), err) }
  return err
}

func (p *LuckyServiceMyPrizeListArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sign", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sign: ", p), err) }
  if err := oprot.WriteString(string(p.Sign)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sign (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sign: ", p), err) }
  return err
}

func (p *LuckyServiceMyPrizeListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LuckyServiceMyPrizeListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type LuckyServiceMyPrizeListResult struct {
  Success []*DataGiftPrize `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewLuckyServiceMyPrizeListResult() *LuckyServiceMyPrizeListResult {
  return &LuckyServiceMyPrizeListResult{}
}

var LuckyServiceMyPrizeListResult_Success_DEFAULT []*DataGiftPrize

func (p *LuckyServiceMyPrizeListResult) GetSuccess() []*DataGiftPrize {
  return p.Success
}
func (p *LuckyServiceMyPrizeListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *LuckyServiceMyPrizeListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LuckyServiceMyPrizeListResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DataGiftPrize, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &DataGiftPrize{}
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.Success = append(p.Success, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LuckyServiceMyPrizeListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MyPrizeList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LuckyServiceMyPrizeListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *LuckyServiceMyPrizeListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LuckyServiceMyPrizeListResult(%+v)", *p)
}


